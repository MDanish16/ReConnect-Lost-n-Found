
import React, { useState } from "react";
import { Item } from "@/entities/Item";
import { SendEmail } from "@/integrations/Core";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { CheckCircle, AlertTriangle, Mail } from "lucide-react";

export default function ClaimDialog({ item, isOpen, onClose, onSuccess }) {
  const [claimData, setClaimData] = useState({
    name: "",
    email: "",
    phone: "",
    description: ""
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState(false);

  const handleInputChange = (field, value) => {
    setClaimData(prev => ({
      ...prev,
      [field]: value
    }));
    setError("");
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError("");

    try {
      // Mark item as claimed with claim details
      await Item.update(item.id, {
        is_claimed: true,
        claim_details: `Claimed by ${claimData.name} (${claimData.email}) - ${claimData.description}`
      });

      // Send email notification to the person who posted the item
      await SendEmail({
        to: item.contact_info,
        subject: `Someone wants to claim your ${item.status} item: ${item.name}`,
        body: `
Hello,

Someone has claimed your ${item.status} item "${item.name}" on ReConnect.

Claimant Details:
- Name: ${claimData.name}
- Email: ${claimData.email}
- Phone: ${claimData.phone}
- Why they think it's theirs: ${claimData.description}

Item Details:
- Name: ${item.name}
- Description: ${item.description}
- Location: ${item.location}
- Date: ${item.date_lost_found}

Please contact the claimant directly to arrange the return if you believe this is the rightful owner.

Best regards,
ReConnect Team
        `
      });

      setSuccess(true);
      setTimeout(() => {
        onSuccess();
        onClose();
        setSuccess(false);
        setClaimData({ name: "", email: "", phone: "", description: "" });
      }, 2000);

    } catch (error) {
      setError("Failed to submit claim. Please try again.");
      console.error("Error submitting claim:", error);
    }

    setIsSubmitting(false);
  };

  const handleClose = () => {
    onClose();
    setError("");
    setSuccess(false);
    setClaimData({ name: "", email: "", phone: "", description: "" });
  };

  if (success) {
    return (
      <Dialog open={isOpen} onOpenChange={handleClose}>
        <DialogContent className="sm:max-w-md bg-gray-800 border-gray-700 text-white">
          <div className="text-center py-6">
            <div className="w-16 h-16 bg-green-600/20 border border-green-500/20 rounded-full flex items-center justify-center mx-auto mb-4">
              <CheckCircle className="w-8 h-8 text-green-400" />
            </div>
            <h3 className="text-xl font-semibold text-white mb-2">Claim Submitted!</h3>
            <p className="text-gray-400">
              We've notified the owner about your claim. They will contact you directly if you're the rightful owner.
            </p>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-md bg-gray-800 border-gray-700 text-white">
        <DialogHeader>
          <DialogTitle className="text-xl font-bold text-white">
            Claim: {item.name}
          </DialogTitle>
          <DialogDescription className="text-gray-400">
            Please provide your contact information and explain why you believe this item is yours.
          </DialogDescription>
        </DialogHeader>

        {error && (
          <Alert variant="destructive" className="mb-4 bg-red-900/20 border-red-800 text-red-400">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="name" className="text-gray-200">Your Name *</Label>
            <Input
              id="name"
              placeholder="Full name"
              value={claimData.name}
              onChange={(e) => handleInputChange("name", e.target.value)}
              className="bg-gray-700 border-gray-600 text-white placeholder-gray-500"
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="email" className="text-gray-200">Email Address *</Label>
            <Input
              id="email"
              type="email"
              placeholder="your.email@example.com"
              value={claimData.email}
              onChange={(e) => handleInputChange("email", e.target.value)}
              className="bg-gray-700 border-gray-600 text-white placeholder-gray-500"
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="phone" className="text-gray-200">Phone Number</Label>
            <Input
              id="phone"
              placeholder="Your phone number"
              value={claimData.phone}
              onChange={(e) => handleInputChange("phone", e.target.value)}
              className="bg-gray-700 border-gray-600 text-white placeholder-gray-500"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="description" className="text-gray-200">Why do you think this is yours? *</Label>
            <Textarea
              id="description"
              placeholder="Describe specific details about the item that prove it's yours..."
              value={claimData.description}
              onChange={(e) => handleInputChange("description", e.target.value)}
              className="min-h-20 bg-gray-700 border-gray-600 text-white placeholder-gray-500"
              required
            />
          </div>

          <div className="flex gap-3 pt-4">
            <Button
              type="button"
              variant="outline"
              onClick={handleClose}
              className="flex-1 bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600"
            >
              Cancel
            </Button>
            <Button
              type="submit"
              disabled={isSubmitting}
              className="flex-1 bg-blue-600 hover:bg-blue-700"
            >
              {isSubmitting ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Submitting...
                </>
              ) : (
                <>
                  <Mail className="w-4 h-4 mr-2" />
                  Submit Claim
                </>
              )}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}
