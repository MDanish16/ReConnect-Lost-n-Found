
import React, { useState } from "react";
import { format } from "date-fns";
import { MapPin, Calendar, Tag, MessageCircle, AlertTriangle } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";

import ClaimDialog from "./ClaimDialog";

const statusColors = {
  lost: "bg-red-100 text-red-800 border-red-200",
  found: "bg-green-100 text-green-800 border-green-200"
};

const categoryColors = {
  electronics: "bg-blue-100 text-blue-800",
  accessories: "bg-purple-100 text-purple-800",
  documents: "bg-yellow-100 text-yellow-800",
  clothing: "bg-pink-100 text-pink-800",
  bags: "bg-indigo-100 text-indigo-800",
  keys: "bg-orange-100 text-orange-800",
  jewelry: "bg-emerald-100 text-emerald-800",
  other: "bg-gray-100 text-gray-800"
};

export default function ItemCard({ item, onClaim }) {
  const [showClaimDialog, setShowClaimDialog] = useState(false);

  const handleClaimSuccess = () => {
    setShowClaimDialog(false);
    onClaim();
  };

  return (
    <>
      <Card className="group hover:shadow-2xl transition-all duration-300 border border-gray-700 bg-gray-800 shadow-xl overflow-hidden">
        <div className="relative">
          {item.image_url ? (
            <div className="aspect-video overflow-hidden">
              <img
                src={item.image_url}
                alt={item.name}
                className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
              />
            </div>
          ) : (
            <div className="aspect-video bg-gradient-to-br from-gray-700 to-gray-600 flex items-center justify-center border-b border-gray-600">
              <div className="text-gray-500 text-center">
                <Tag className="w-12 h-12 mx-auto mb-2" />
                <p className="text-sm">No image</p>
              </div>
            </div>
          )}
          
          <div className="absolute top-4 left-4">
            <Badge className={`${statusColors[item.status]} border font-semibold`}>
              {item.status === "lost" ? "LOST" : "FOUND"}
            </Badge>
          </div>
        </div>

        <CardContent className="p-6">
          <div className="mb-4">
            <h3 className="text-xl font-bold text-white mb-2 group-hover:text-blue-400 transition-colors">
              {item.name}
            </h3>
            <p className="text-gray-400 text-sm line-clamp-2 leading-relaxed">
              {item.description}
            </p>
          </div>

          <div className="space-y-3 mb-6">
            <div className="flex items-center gap-2 text-sm text-gray-400">
              <MapPin className="w-4 h-4" />
              <span>{item.location}</span>
            </div>
            <div className="flex items-center gap-2 text-sm text-gray-400">
              <Calendar className="w-4 h-4" />
              <span>
                {item.status === "lost" ? "Lost on" : "Found on"}{" "}
                {format(new Date(item.date_lost_found), "MMM d, yyyy")}
              </span>
            </div>
            <div className="flex items-center gap-2">
              <Badge className={`${categoryColors[item.category]} text-xs border`}>
                {item.category.replace(/_/g, ' ')}
              </Badge>
            </div>
          </div>

          <Button
            onClick={() => setShowClaimDialog(true)}
            className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-xl transition-all duration-200 group-hover:bg-blue-700 border border-blue-500"
          >
            <MessageCircle className="w-4 h-4 mr-2" />
            {item.status === "lost" ? "I Found This!" : "This is Mine!"}
          </Button>
        </CardContent>
      </Card>

      <ClaimDialog
        item={item}
        isOpen={showClaimDialog}
        onClose={() => setShowClaimDialog(false)}
        onSuccess={handleClaimSuccess}
      />
    </>
  );
}
